#include <iostream>
#include <vector>
using namespace std;

// Function to perform Brick Sort
void brickSort(vector<int>& arr) {
    bool sorted = false;
    int n = arr.size();

    while (!sorted) {
        sorted = true;

        // Perform even phase (comparing elements at even indices with their adjacent elements at odd indices)
        for (int i = 0; i <= n - 2; i += 2) {
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                sorted = false;
            }
        }

        // Perform odd phase (comparing elements at odd indices with their adjacent elements at even indices)
        for (int i = 1; i <= n - 2; i += 2) {
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                sorted = false;
            }
        }
    }
}

int main() {
    int N;
    cout << "Enter the size of the array: ";
    cin >> N;

    vector<int> arr(N);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }

    // Perform Brick sort
    brickSort(arr);

    // Print the sorted array
    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
