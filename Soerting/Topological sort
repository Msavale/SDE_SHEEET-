#include <iostream>
#include <vector>
#include <stack>
#include <unordered_set>
using namespace std;

// Depth-first search function to explore the graph and perform topological sort
void dfs(vector<vector<int>>& graph, int v, vector<bool>& visited, stack<int>& result) {
    visited[v] = true;

    // Recursively visit adjacent vertices
    for (int neighbor : graph[v]) {
        if (!visited[neighbor]) {
            dfs(graph, neighbor, visited, result);
        }
    }

    // Push the current vertex onto the stack after visiting all its neighbors
    result.push(v);
}

// Function to perform topological sort
vector<int> topologicalSort(vector<vector<int>>& graph, int n) {
    stack<int> result;
    vector<bool> visited(n, false);

    // Perform depth-first search from each vertex if it hasn't been visited yet
    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            dfs(graph, i, visited, result);
        }
    }

    // Pop elements from the stack to get the topological ordering
    vector<int> sortedOrder;
    while (!result.empty()) {
        sortedOrder.push_back(result.top());
        result.pop();
    }

    return sortedOrder;
}

int main() {
    int numVertices, numEdges;
    cout << "Enter the number of vertices and edges: ";
    cin >> numVertices >> numEdges;

    // Initialize the adjacency list representation of the graph
    vector<vector<int>> graph(numVertices);

    cout << "Enter the edges (format: source destination):" << endl;
    for (int i = 0; i < numEdges; ++i) {
        int source, destination;
        cin >> source >> destination;
        graph[source].push_back(destination);
    }

    // Perform topological sort
    vector<int> sortedOrder = topologicalSort(graph, numVertices);

    // Print the topological ordering
    cout << "Topological ordering:" << endl;
    for (int vertex : sortedOrder) {
        cout << vertex << " ";
    }
    cout << endl;

    return 0;
}
