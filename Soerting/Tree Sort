#include <iostream>
using namespace std;

// Definition of a node in the binary search tree
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a new node into the binary search tree
Node* insertNode(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }

    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else {
        root->right = insertNode(root->right, value);
    }

    return root;
}

// Function to perform an in-order traversal of the binary search tree
void inOrderTraversal(Node* root) {
    if (root == nullptr) {
        return;
    }

    inOrderTraversal(root->left);
    cout << root->data << " ";
    inOrderTraversal(root->right);
}

// Function to perform Tree Sort
void treeSort(int arr[], int n) {
    Node* root = nullptr;

    // Build the binary search tree
    for (int i = 0; i < n; i++) {
        root = insertNode(root, arr[i]);
    }

    // Perform in-order traversal to retrieve elements in sorted order
    inOrderTraversal(root);
}

int main() {
    int N;
    cout << "Enter the size of the array: ";
    cin >> N;

    int arr[N];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
    }

    // Perform Tree sort
    cout << "Sorted array: ";
    treeSort(arr, N);
    cout << endl;

    return 0;
}
