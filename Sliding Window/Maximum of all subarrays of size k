void printMaxOfSubarrays(const vector<int>& arr, int k) {
    int n = arr.size();
    deque<int> dq;

    // Process the first k elements
    for (int i = 0; i < k; ++i) {
        while (!dq.empty() && arr[i] >= arr[dq.back()])
            dq.pop_back();
        dq.push_back(i);
    }

    // Process the remaining elements
    for (int i = k; i < n; ++i) {
        cout << arr[dq.front()] << " ";

        // Remove elements outside the current window
        while (!dq.empty() && dq.front() <= i - k)
            dq.pop_front();

        // Remove elements from the back of the deque which are smaller than the current element
        while (!dq.empty() && arr[i] >= arr[dq.back()])
            dq.pop_back();

        dq.push_back(i);
    }

    // Print the maximum element of the last window
    cout << arr[dq.front()] << endl;
}
