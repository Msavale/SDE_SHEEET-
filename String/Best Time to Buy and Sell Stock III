int withdp(vector<int> val, int cap, int n)
{
    vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
    for(int i=n-1;i>=0;i--)
    {
        for(int j=0;j<=1;j++)
        {
            for(int c = 1;c<=2;c++)
            {
                if(j==0)
                {
                    dp[i][j][c] = max(-val[i]+dp[i+1][1][c],dp[i+1][0][c]);
                }
                else {
                    dp[i][j][c] = max(+val[i]+dp[i+1][0][c-1],dp[i+1][1][c]);
                }
            }
        }
    }
    return dp[0][0][2];
}

int maxProfit(vector<int>& prices)
{
    return withdp(prices,2,prices.size());   
}
