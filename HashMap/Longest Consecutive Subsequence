#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

int longestConsecutiveSubsequence(const vector<int>& nums) {
    unordered_map<int, int> sequenceLength; // Key: element, Value: length of the consecutive sequence containing the element
    int maxLength = 0;

    // Iterate through the array and update the sequenceLength for each element
    for (int num : nums) {
        // If the current element is already in the hashmap, skip it
        if (sequenceLength.find(num) != sequenceLength.end()) {
            continue;
        }

        // Check if num - 1 and num + 1 exist in sequenceLength
        int leftLength = sequenceLength[num - 1];
        int rightLength = sequenceLength[num + 1];

        // Update the length of the consecutive sequence containing num
        int currentLength = leftLength + rightLength + 1;
        sequenceLength[num] = currentLength;

        // Update the length of the consecutive sequences at the boundary elements
        if (leftLength > 0) {
            sequenceLength[num - leftLength] = currentLength;
        }
        if (rightLength > 0) {
            sequenceLength[num + rightLength] = currentLength;
        }

        // Update the maxLength
        maxLength = max(maxLength, currentLength);
    }

    return maxLength;
}

int main() {
    vector<int> nums = {100, 4, 200, 1, 3, 2};

    cout << "Length of the longest consecutive subsequence: " << longestConsecutiveSubsequence(nums) << endl;

    return 0;
}
