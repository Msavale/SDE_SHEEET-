#include <iostream>
#include <unordered_map>

using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

void insert(Node*& head, int val) {
    Node* newNode = new Node(val);
    if (!head) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void printList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

Node* findUnion(Node* list1, Node* list2) {
    unordered_map<int, int> hashmap;
    Node* result = nullptr;

    while (list1) {
        hashmap[list1->data]++;
        insert(result, list1->data);
        list1 = list1->next;
    }

    while (list2) {
        if (hashmap.find(list2->data) == hashmap.end()) {
            insert(result, list2->data);
        }
        list2 = list2->next;
    }

    return result;
}

Node* findIntersection(Node* list1, Node* list2) {
    unordered_map<int, int> hashmap;
    Node* result = nullptr;

    while (list1) {
        hashmap[list1->data]++;
        list1 = list1->next;
    }

    while (list2) {
        if (hashmap.find(list2->data) != hashmap.end() && hashmap[list2->data] > 0) {
            insert(result, list2->data);
            hashmap[list2->data]--; // To ensure duplicates are handled properly
        }
        list2 = list2->next;
    }

    return result;
}

int main() {
    Node* list1 = nullptr;
    insert(list1, 1);
    insert(list1, 2);
    insert(list1, 3);
    insert(list1, 4);

    Node* list2 = nullptr;
    insert(list2, 3);
    insert(list2, 4);
    insert(list2, 5);
    insert(list2, 6);

    cout << "Union: ";
    printList(findUnion(list1, list2));

    cout << "Intersection: ";
    printList(findIntersection(list1, list2));

    return 0;
}
